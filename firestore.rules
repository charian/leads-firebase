rules_version = '2';

service cloud.firestore {
  match /databases/{db}/documents {

    // 헬퍼 함수: 현재 로그인한 사용자의 역할을 반환
    function getMyRole() {
      return request.auth != null ?
        get(/databases/$(db)/documents/_config/admins).data.roles[request.auth.token.email] : null;
    }

    // --- Leads 컬렉션 규칙 ---
    match /leads/{leadId} {
      // 공개된 페이지에서 누구나 리드를 생성할 수 있도록 허용
      allow create;
      // 'user' 등급 이상의 모든 관리자가 리드를 읽고 수정할 수 있도록 허용
      allow read, update: if getMyRole() in ['super-admin', 'admin', 'user'];
      // 'super-admin'만 리드를 삭제할 수 있도록 허용
      allow delete: if getMyRole() == 'super-admin';
    }

    // --- 설정(_config) 컬렉션 규칙 ---
    match /_config/{docId} {
       // 'admin' 등급 이상만 설정을 읽을 수 있도록 허용 (단, admins 문서는 예외)
      allow read: if getMyRole() in ['super-admin', 'admin'];
      // 'super-admin'만 설정을 수정할 수 있도록 허용
      allow write: if getMyRole() == 'super-admin';
    }

    // `_config/admins` 문서에 대한 특별 규칙
    match /_config/admins {
       // ✅ [핵심 수정] 모든 인증된 사용자가 자신의 역할을 확인하기 위해 읽기 허용
      allow read: if request.auth != null;
      // 'super-admin'만 운영자 목록을 수정할 수 있도록 허용
      allow write: if getMyRole() == 'super-admin';
    }
    
    // --- History 컬렉션 규칙 ---
    match /history/{docId} {
      allow read: if getMyRole() == 'super-admin';
      allow write: if false; // 함수를 통해서만 쓰기 가능
    }

    // --- Mail 컬렉션 규칙 (Firebase Extension용) ---
    match /mail/{docId} {
      allow create: if true; // 함수에서 메일을 보낼 수 있도록 허용
      allow read, update, delete: if false;
    }
  }
}